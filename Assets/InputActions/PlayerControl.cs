//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerNormal"",
            ""id"": ""5874ab38-e4e8-4ec2-b44e-c210b3aadb5f"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1aea532d-5da3-4fbd-a33b-02b7aa6cef46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View"",
                    ""type"": ""Value"",
                    ""id"": ""979a6226-f7f4-4c36-8893-7dcfc987e896"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""04289409-46e1-49c6-a005-1d938c25ccee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""123bae91-2523-423c-804f-8dbd7fe72d31"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1a30fe3-9a94-4698-afca-51849d9f88d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b0fd38eb-a36d-4205-8e7c-4aebe1d0b083"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4283bebd-e98a-48b8-aa27-b53b440a1f2a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5fb11d3c-e206-431c-9a30-457c48c6ef76"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8deac9fc-af22-4d9b-9dfd-97eb920a300f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f877e9b-88d7-477f-be11-654eaf4f441a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""9f7873f3-0d22-43d8-b359-b96c02dbc9a4"",
            ""actions"": [
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""46df38c2-1fc5-4986-a397-6154db933390"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""566493db-a039-4f35-afc2-cf0fdb3f43b0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionUI"",
            ""id"": ""60dee593-f1fb-4d69-a305-4b9a89619e81"",
            ""actions"": [
                {
                    ""name"": ""InteractionItem"",
                    ""type"": ""Button"",
                    ""id"": ""c46dbd8e-cbd4-4920-8c6b-775ea3d5e8d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8198a2db-5e5a-452c-994b-95703e4f65e0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractionItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerNormal
        m_PlayerNormal = asset.FindActionMap("PlayerNormal", throwIfNotFound: true);
        m_PlayerNormal_Jump = m_PlayerNormal.FindAction("Jump", throwIfNotFound: true);
        m_PlayerNormal_View = m_PlayerNormal.FindAction("View", throwIfNotFound: true);
        m_PlayerNormal_Move = m_PlayerNormal.FindAction("Move", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Esc = m_Pause.FindAction("Esc", throwIfNotFound: true);
        // InteractionUI
        m_InteractionUI = asset.FindActionMap("InteractionUI", throwIfNotFound: true);
        m_InteractionUI_InteractionItem = m_InteractionUI.FindAction("InteractionItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerNormal
    private readonly InputActionMap m_PlayerNormal;
    private List<IPlayerNormalActions> m_PlayerNormalActionsCallbackInterfaces = new List<IPlayerNormalActions>();
    private readonly InputAction m_PlayerNormal_Jump;
    private readonly InputAction m_PlayerNormal_View;
    private readonly InputAction m_PlayerNormal_Move;
    public struct PlayerNormalActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerNormalActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerNormal_Jump;
        public InputAction @View => m_Wrapper.m_PlayerNormal_View;
        public InputAction @Move => m_Wrapper.m_PlayerNormal_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerNormal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerNormalActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerNormalActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @View.started += instance.OnView;
            @View.performed += instance.OnView;
            @View.canceled += instance.OnView;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerNormalActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @View.started -= instance.OnView;
            @View.performed -= instance.OnView;
            @View.canceled -= instance.OnView;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerNormalActions instance)
        {
            if (m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerNormalActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerNormalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerNormalActions @PlayerNormal => new PlayerNormalActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Esc;
    public struct PauseActions
    {
        private @PlayerControl m_Wrapper;
        public PauseActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Esc => m_Wrapper.m_Pause_Esc;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // InteractionUI
    private readonly InputActionMap m_InteractionUI;
    private List<IInteractionUIActions> m_InteractionUIActionsCallbackInterfaces = new List<IInteractionUIActions>();
    private readonly InputAction m_InteractionUI_InteractionItem;
    public struct InteractionUIActions
    {
        private @PlayerControl m_Wrapper;
        public InteractionUIActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractionItem => m_Wrapper.m_InteractionUI_InteractionItem;
        public InputActionMap Get() { return m_Wrapper.m_InteractionUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionUIActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionUIActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionUIActionsCallbackInterfaces.Add(instance);
            @InteractionItem.started += instance.OnInteractionItem;
            @InteractionItem.performed += instance.OnInteractionItem;
            @InteractionItem.canceled += instance.OnInteractionItem;
        }

        private void UnregisterCallbacks(IInteractionUIActions instance)
        {
            @InteractionItem.started -= instance.OnInteractionItem;
            @InteractionItem.performed -= instance.OnInteractionItem;
            @InteractionItem.canceled -= instance.OnInteractionItem;
        }

        public void RemoveCallbacks(IInteractionUIActions instance)
        {
            if (m_Wrapper.m_InteractionUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionUIActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionUIActions @InteractionUI => new InteractionUIActions(this);
    public interface IPlayerNormalActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnEsc(InputAction.CallbackContext context);
    }
    public interface IInteractionUIActions
    {
        void OnInteractionItem(InputAction.CallbackContext context);
    }
}
